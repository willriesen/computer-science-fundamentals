Exercises

1. Implement a solution for bubble sort.

var array1 = [9, 2, 5, 6, 4, 3, 7, 10, 1, 8];
var array2 = [4, 1, 6, 9, 3, 12, 34, 53, 14, 64, 33, 23, 41, 8]

function bubbleSort(array) {
  function swap(array, i, j) {
  var temp = array[i];
  array[i] = array[j];
  array[j] = temp;
}
  var swapped;
  do {
    swapped = false;
    for(var i = 0; i < array.length; i++) {
      if(array[i] && array[i + 1] && array[i] > array[i + 1]) {
        swap(array, i, i + 1);
        swapped = true;
      }
    }
  } while(swapped);
  return array;
}

2. Write pseudocode for quicksort.

FUNCTION quickSort(collection)
    IF collection length less than or equal to 1
        RETURN collection
    ELSE
        SET left, right, newArray to empty arrays
        SET pivot to collection.pop()
        SET length to length of collection

        FOR i = 0, i less than length, i INCREMENT by one
            IF collection[i] less than or equal to pivot
                PUSH collection[i] to last index of left
            ELSE
                PUSH collection[i] to last index of right
            END IF
        END FOR
        RETURN newArray.concat(quickSort(left), pivot, quickSort(right));
    END IF
END FUNCTION

3. We talked about time complexity in a previous checkpoint, and how to get an idea of the efficiency of an algorithm. After looking at the pseudocode for the above sorting methods, identify why merge sort and quick sort are much more efficient than the others. Walking through each algorithm with a few sample collections may help.

A. Quick Sort and Merge Sort have better Average Case and Worst Case time complexity than say the Bubble or Insertion Sorts I think because they split the initial collection into smaller and smaller sections, sorts those smaller smaller sub-collections/partitions, then brings them back together in the proper order. This is more efficient than looping through the whole array, especially with something like a bubble sort where it may have to go over some elements in the array multiple times.

4. All of the sorts addressed in this checkpoint are known as comparison sorts. Research bucket sort and explain how it works. What is the ideal input for bucket sort?

A. The Bucket Sort is a distribution sort, so called because it scatters or distributes elements into buckets before sorting the elements in each bucket, finally adding the now-sorted buckets in order back into the original array with all the elements sorted. For Bucket sorts to be O(n) on average the number of buckets n must be equal to the length of the array being sorted, and the input array must be uniformly distributed across the range of possible bucket values. If not then the time complexity of Bucket Sort will be dominated by the time complexity of nextSort, O(n^2), giving the Bucket Sort higher time complexity than O(n log(n)) comparison sort algorithms like Quick Sort.