Exercises

1. What is a binary tree and what makes it unique to other 
trees?

Tree data structures have their root node at the top and they 
grow downwards. Nodes without children are called leaf nodes. 
What makes a binary tree unique is that it may have up to two 
child nodes: a left node and a right node.


2. What is a heuristic?

Heuristic is a guess made by an algorithm to solve a complex 
problem faster by sacrificing accuracy. Instead of calculating 
all possible solutions, software engineers use their best 
guesses instead. An example is to guess that as long as one 
travels closer to a desired destination, one will find one of 
the shortest paths.

3. What is another problem besides the shortest-path problem 
that requires the use of heuristics?

It can be an educated guess.  With an educated guess a student 
considers what they have observed in the past, and applies 
that history to a situation where a more definite answer has 
not yet been decided.

4. What is the difference between a depth-first search and a 
breadth-first search?

A depth-first search (DFS) is an algorithm for traversing or 
searching tree or graph data structures. Here one starts at 
the root and explores as far as possible along each branch 
before backtracking and searching the next branch.

A breadth-first search (BFS) is also an algorithm for 
traversing or searching tree or graph data structures. In a 
breadth-first search, one starts at the tree root and explores 
the neighbor nodes first, before moving to the next level of 
neighbors.

5. Explain in your own words what an undirected, a-cyclic, 
unweighted graph is.

A undirected graph is one where the edge connecting two Nodes 
is ambiguous. The start and end between these two Nodes is 
unclear.

A-cyclic graphs are graphs that do not form loops.  The last 
node is a data structure does not point back to the beginning.  
Two examples of a-cyclic graphs are Linked Lists and Trees.  
Unidirectional data flow.

An unweighted graph does not assign the cost of travel between 
Nodes.  It treats travel between each node equally.  Linked 
Lists would be an example of an unweighted graph.


6. What kind of graph is a binary search tree?

A binary tree is a directed, a-cyclic, unweighted graph.


Programming Questions

1. Given a Binary Search Tree and a value, write a function 
that checks to see whether the value exists within the tree.
Example: The value 10 exists in the tree. The value 23 does 
not exist in the tree.

SET FUNCTION with one Input
SET VARIABLE current to root node
START WHILE LOOP with current parameter as INPUT
  IF data EQUALS current.data
    RETURN TRUE
  END IF
  IF
    data is LESS THAN current.data
      current = current.left
  ELSE
    data is greater THAN current.data
      current = current.right
IF INPUT is not found
  RETURN FALSE

  class Node {
  constructor(data, left = null, right = null) {
    this.data = data;
    this.left = left;
    this.right = right;
  }
}

class BST {
  constructor() {
    this.root = null;
  }
  add(data) {
    const node = this.root;
    if (node === null) {
      this.root = new Node(data);
      return;
    } else {
      const searchTree = function(node) {
        if (data < node.data) {
          if (node.left === null) {
            node.left = new Node(data);
            return;
          } else if (node.left !== null) {
            return searchTree(node.left);
          }
        } else if (data > node.data) {
          if (node.right === null) {
            node.right = new Node(data);
            return;
          } else if (node.right !== null) {
            return searchTree(node.right);
          }
        } else {
          return null;
        }
      };
      return searchTree(node);
    }
  }
  isPresent(data) {
    let current = this.root;
    while (current) {
      if (data === current.data) {
        return true;
      }
      if (data < current.data) {
        current = current.left;
      } else {
        current = current.right;
      }
    }
    return false;
  }
}

let bst = new BST()

bst.add(8);
bst.add(3);
bst.add(10);
bst.add(1);
bst.add(6);
bst.add(14);
bst.add(4);
bst.add(7);
bst.add(13);


console.log(bst.isPresent(10)); //prints true
console.log(bst.isPresent(23)); //prints false


2. Given a Binary Search Tree and two nodes, n1 and n2, write 
a function that finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The 
distance between the nodes 8 and 10 is 1. The distance between 
the nodes 1 and 14 is 4.
A. For this problem I had to make the heuristic assumption that the distance between two given nodes will, OFTEN ENOUGH, be equal the distance from root to node1 PLUS the distance between root and node2 MINUS TWICE (once for each node) the distance from root to the Lowest Common Ancestor of node1 and node2.
//begin code
class Node {
	constructor(data) {
		this.data = data;
		this.left = null;
		this.right = null;
	}
}

class BinarySearchTree {
	constructor() {
		this.root = null;
	}

	findDistanceBetweenTwoNodes(root, n1, n2) {
		var lowestCommonAncestor = this.findCommonAncestor(root, n1, n2);
		var distanceNode1ToRoot = this.countAncestors(lowestCommonAncestor, n1);
		var distanceNode2ToRoot = this.countAncestors(lowestCommonAncestor, n2);
		var distanceRootToAncestor = this.countAncestors(root, lowestCommonAncestor);
		var totalDistance = (distanceNode1ToRoot + distanceNode2ToRoot) - (2 * distanceRootToAncestor);
		return ('The distance between node ' + n1 + ' and node ' + n2 + ' is ' + totalDistance);
	}

	findCommonAncestor(root, n1, n2) {
		if (!root) return;
		var lowestCommonAncestor = root.data;
		if (n1 === lowestCommonAncestor || n2 === lowestCommonAncestor) {
			return lowestCommonAncestor;
		}
		if (n1 < lowestCommonAncestor && n2 < lowestCommonAncestor) {
			return this.findCommonAncestor(root.left, n1, n2);
		}
		if (n1 > lowestCommonAncestor && n2 > lowestCommonAncestor) {
			return this.findCommonAncestor(root.right, n1, n2);
		}
		return lowestCommonAncestor;
	}

	countAncestors(root, data) {
		let thisNode = this.root;
		let nodeCount = 0;
		while (thisNode) {
			if (data === thisNode.data) {
				return nodeCount;
			}
			thisNode = data < thisNode.data ? thisNode.left : thisNode.right;
			nodeCount++;
		}
	}

	getRootNode() {
		return this.root;
	}

	insert(data) {
		var newNode = new Node(data);
		if (this.root === null) {
			this.root = newNode;
			this.length++;
		} else {
			this.insertNode(this.root, newNode);
		}
	}

	insertNode(node, newNode) {
		if (newNode.data < node.data) {
			if (node.left === null) {
				node.left = newNode;
				this.length++;
			} else {
				this.insertNode(node.left, newNode);
			}
		} else {
			if (node.right === null) {
				node.right = newNode;
				this.length++;
			} else {
				this.insertNode(node.right, newNode);
			}
		}
	}
}

var BST = new BinarySearchTree();

BST.insert(8);
BST.insert(10);
BST.insert(3);
BST.insert(14);
BST.insert(6);
BST.insert(1);
BST.insert(13);
BST.insert(7);
BST.insert(4);

var root = BST.getRootNode();
BST.findDistanceBetweenTwoNodes(root, 4, 10); //'The distance between node 4 and node 10 is 4'
//end code